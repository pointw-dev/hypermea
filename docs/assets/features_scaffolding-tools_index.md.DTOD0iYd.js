import{_ as i,C as t,c as n,o as l,al as a,G as p,w as h,a as o}from"./chunks/framework.CEo5TfsR.js";const m=JSON.parse('{"title":"Scaffolding tools","description":"","frontmatter":{},"headers":[],"relativePath":"features/scaffolding-tools/index.md","filePath":"features/scaffolding-tools/index.md"}'),d={name:"features/scaffolding-tools/index.md"};function r(c,s,k,u,g,y){const e=t("centered-image");return l(),n("div",null,[s[1]||(s[1]=a(`<h1 id="scaffolding-tools" tabindex="-1">Scaffolding tools <a class="header-anchor" href="#scaffolding-tools" aria-label="Permalink to &quot;Scaffolding tools&quot;">â€‹</a></h1><p>You use the hypermea toolkit to create and craft your API. These are command line tools, similar to how you use git or docker.</p><h2 id="top-level-commands" tabindex="-1">Top level commands <a class="header-anchor" href="#top-level-commands" aria-label="Permalink to &quot;Top level commands&quot;">â€‹</a></h2><p>All commands begin with <code>hypermea</code> and are followed by one of the following top-level commands:</p><table tabindex="0"><thead><tr><th>command</th><th>Definition</th></tr></thead><tbody><tr><td><code>api</code></td><td>This, unsurprisingly, represents the API service itself. When you run <code>hypermea api create...</code> a ton of code is generated, comprising your service. The code wraps start/stop (and other details) in a class called <code>HypermeaService</code> and your app is an instance of this class. <code>HypermeaService</code> inherits from <code>Flask</code> so your application is a Flask application as much as it is an hypermea/Eve application.</td></tr><tr><td><code>resource</code></td><td>These are the &#39;nouns&#39; of your service. The set of resources you add to your API comprise the service <strong>domain</strong>. Use the HTTP verbs (GET, POST, DELETE, PATCH, etc.) to operate these resources, and add affordances to enhance state management beyond CRUD.</td></tr><tr><td><code>link</code></td><td>This creates a parent/child relationship between two resources and adds navigation affordances.</td></tr><tr><td><code>affordance</code></td><td>In a Hypermedia API, clients operate your service&#39;s state by way of hyperlinks. When you want to offer your clients the opportunity to do so, you provide a link which when requested with an HTTP verb causes the state change. See the Hypermedia section below for more details and examples.</td></tr><tr><td><code>endpoint</code></td><td>In the very unlikely event that you need to provide a capability that does not fit within the constraints of Hypermedia, you can define an arbitrary endpoint. Use that cautiously, lest the ghost of Roy Fielding haunt you ðŸ˜ƒ</td></tr><tr><td><code>docker</code></td><td>When your API is equipped with <code>--add-docker</code> the <code>docker</code> command speeds up some of the mundate tasks you would do while developing and testing the API in a docker container.</td></tr><tr><td><code>integration</code></td><td>When your service needs to use other services (whether remote or installed locally) you may find it convenient to separate the integration logic into its own module. That what <code>integration</code> is for. There are some built-in integrations (e.g. to AWS&#39;s S3), or you can start with a blank integration and roll your own.</td></tr><tr><td><code>setting</code></td><td>(coming soon)</td></tr><tr><td><code>run</code></td><td>This command launches your service. Call it anywhere in your service folder structure.</td></tr></tbody></table><h2 id="help-when-you-need-it" tabindex="-1">Help when you need it <a class="header-anchor" href="#help-when-you-need-it" aria-label="Permalink to &quot;Help when you need it&quot;">â€‹</a></h2><p>You can view the above list by running <code>hypermea</code> with <code>--help</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hypermea</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><p>With each command, add <code>--help</code> to see more details about that command</p><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>The <code>hypermea</code> command is aliased to the shorter <code>hy</code> and you can use either interchangeably</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hypermea</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><h2 id="a-quick-introduction" tabindex="-1">A quick introduction <a class="header-anchor" href="#a-quick-introduction" aria-label="Permalink to &quot;A quick introduction&quot;">â€‹</a></h2>`,12)),p(e,{src:"/img/event-buddy-domain.svg",rounded:"",width:"450"},{default:h(()=>s[0]||(s[0]=[o("The Event Buddy domain model")])),_:1}),s[2]||(s[2]=a(`<h3 id="prepare-the-project-folder" tabindex="-1">Prepare the project folder <a class="header-anchor" href="#prepare-the-project-folder" aria-label="Permalink to &quot;Prepare the project folder&quot;">â€‹</a></h3><p>As we would with any python project, set&#39;s start with an empty folder and a python virtual environment.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> event-buddy</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> event-buddy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [recommended] create a Python virtual environment here</span></span></code></pre></div><h3 id="scaffold-the-model" tabindex="-1">Scaffold the model <a class="header-anchor" href="#scaffold-the-model" aria-label="Permalink to &quot;Scaffold the model&quot;">â€‹</a></h3><p>To implement this resource model in a single service named <strong>event-buddy</strong>, you would execute the following commands:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> event-buddy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># alternately:   hy api create .   which uses the folder name as the project name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resource</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venues</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resource</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> events</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resource</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registrations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resource</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accounts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venues</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> events</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> events</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registrations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> accounts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registrations</span></span></code></pre></div><h3 id="verify-it" tabindex="-1">Verify it <a class="header-anchor" href="#verify-it" aria-label="Permalink to &quot;Verify it&quot;">â€‹</a></h3><p>You can confirm the basic scaffolding with <code>hy link list</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span></code></pre></div><p>which outputs</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>venues</span></span>
<span class="line"><span>- have events</span></span>
<span class="line"><span>events</span></span>
<span class="line"><span>- belong to a venue</span></span>
<span class="line"><span>- have registrations</span></span>
<span class="line"><span>registrations</span></span>
<span class="line"><span>- belong to an event</span></span>
<span class="line"><span>- belong to an account</span></span>
<span class="line"><span>accounts</span></span>
<span class="line"><span>- have registrations</span></span></code></pre></div><p>In fact, if you use <a href="https://editor.plantuml.com/" target="_blank" rel="noreferrer">PlantUML</a> you can recreate the diagram above:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plant_uml</span></span></code></pre></div><p>which outputs</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@startuml</span></span>
<span class="line"><span>hide &lt;&lt;resource&gt;&gt; circle</span></span>
<span class="line"><span>hide &lt;&lt;remote&gt;&gt; circle</span></span>
<span class="line"><span>hide members </span></span>
<span class="line"><span></span></span>
<span class="line"><span>skinparam class {</span></span>
<span class="line"><span>    BackgroundColor&lt;&lt;remote&gt;&gt; LightBlue</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class venues &lt;&lt;resource&gt;&gt;</span></span>
<span class="line"><span>class events &lt;&lt;resource&gt;&gt;</span></span>
<span class="line"><span>class registrations &lt;&lt;resource&gt;&gt;</span></span>
<span class="line"><span>class accounts &lt;&lt;resource&gt;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>venues ||--o{ events</span></span>
<span class="line"><span>events ||--o{ registrations</span></span>
<span class="line"><span>accounts ||--o{ registrations</span></span>
<span class="line"><span>@enduml</span></span></code></pre></div><p>which you can copy/paste into the PlantUML tool of choice (e.g. the <a href="https://editor.plantuml.com/" target="_blank" rel="noreferrer">online editor</a>)</p><h3 id="spin-it-up" tabindex="-1">Spin it up <a class="header-anchor" href="#spin-it-up" aria-label="Permalink to &quot;Spin it up&quot;">â€‹</a></h3><p>When you&#39;re satisfied, create a temporary mongodb instance:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 27017:27017</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> temp-mongo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mongo</span></span></code></pre></div><p>Then run your newly minted service:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre></div><p>The first time you run this way, hypermea installs the python dependencies listed in your projects <code>requirements.txt</code> (hence why the python virtual environment is recommended).</p><h3 id="kick-the-tires" tabindex="-1">Kick the tires <a class="header-anchor" href="#kick-the-tires" aria-label="Permalink to &quot;Kick the tires&quot;">â€‹</a></h3><p>The default port is 2112. The following are some curl commands to explore the running service. (or better, use <a href="https://pointw-dev.github.io/hypermedia-docs/introduction/hypermedia-in-action/v1/explore-with-postman.html#configure-postman" target="_blank" rel="noreferrer">Postman</a>)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:2112</span></span></code></pre></div><p>or better</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:2112?pretty</span></span></code></pre></div><p>dive deeper:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:2112/venues?pretty</span></span></code></pre></div><p>There are no venues yet (<code>&quot;_items&#39;: []</code>). Let&#39;s add one. By default all resources have <code>name</code> and <code>description</code> fields (which you can add/remove/customize as you see fit!)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root:password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:2112/venues</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Boardroom</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span></code></pre></div><p>And now let&#39;s look at our new venue:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:2112/venues?pretty</span></span></code></pre></div><p>How easy was that?</p><h3 id="shut-it-down" tabindex="-1">Shut it down <a class="header-anchor" href="#shut-it-down" aria-label="Permalink to &quot;Shut it down&quot;">â€‹</a></h3><p>When you&#39;re finished <code>Ctrl+C</code> on the running service to close it, then stop the mongo instance with</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> temp-mongo</span></span></code></pre></div><h2 id="in-conclusion" tabindex="-1">In conclusion <a class="header-anchor" href="#in-conclusion" aria-label="Permalink to &quot;In conclusion&quot;">â€‹</a></h2><p>Now all that remains is to open the project in your IDE, flesh out the domain (add fields, validations, etc.), build in your business logic, and you&#39;re off...</p><p>This just scratches the surface of how you can use <strong>hypermea</strong> to make your life easier. Read on to learn more.</p>`,40))])}const b=i(d,[["render",r]]);export{m as __pageData,b as default};
