import{_ as i,c as a,o as e,al as n}from"./chunks/framework.CEo5TfsR.js";const c=JSON.parse('{"title":"Getting Started with ResourceModel in Hypermea","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://pointw-dev.github.io/hypermea/features/scaffolding-tools/resources-and-links.html"}]]},"headers":[],"relativePath":"features/scaffolding-tools/resources-and-links.md","filePath":"features/scaffolding-tools/resources-and-links.md"}'),t={name:"features/scaffolding-tools/resources-and-links.md"};function l(h,s,o,r,p,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="getting-started-with-resourcemodel-in-hypermea" tabindex="-1">Getting Started with <code>ResourceModel</code> in Hypermea <a class="header-anchor" href="#getting-started-with-resourcemodel-in-hypermea" aria-label="Permalink to &quot;Getting Started with \`ResourceModel\` in Hypermea&quot;">​</a></h1><p>In <strong>hypermea</strong>, a <code>ResourceModel</code> defines a resource using a familiar <code>pydantic</code> class structure, and is automatically translated into a Cerberus-compatible schema for Eve. This gives you the power of static typing, validation, and code completion — while hypermea handles the hard part of rendering and linking at runtime.</p><hr><h2 id="🧱-basic-structure" tabindex="-1">🧱 Basic Structure <a class="header-anchor" href="#🧱-basic-structure" aria-label="Permalink to &quot;🧱 Basic Structure&quot;">​</a></h2><p>To define a new resource, inherit from <code>ResourceModel</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hypermea </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResourceModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResourceModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    make: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    year: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span></span></code></pre></div><p>This automatically creates a resource called <code>car</code> with the appropriate schema and default REST routes.</p><hr><h2 id="🔁-customizing-resource-behavior" tabindex="-1">🔁 Customizing Resource Behavior <a class="header-anchor" href="#🔁-customizing-resource-behavior" aria-label="Permalink to &quot;🔁 Customizing Resource Behavior&quot;">​</a></h2><h3 id="🔹-config-plural" tabindex="-1">🔹 <code>Config.plural</code> <a class="header-anchor" href="#🔹-config-plural" aria-label="Permalink to &quot;🔹 \`Config.plural\`&quot;">​</a></h3><p>You may define the collection name explicitly:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResourceModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    make: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        plural </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cars&quot;</span></span></code></pre></div><p>If omitted, the plural will default to <code>car</code> (i.e. no transformation). We recommend setting this explicitly to avoid naming collisions and clarify developer intent.</p><h3 id="🔹-config-link-rel" tabindex="-1">🔹 <code>Config.link_rel</code> <a class="header-anchor" href="#🔹-config-link-rel" aria-label="Permalink to &quot;🔹 \`Config.link_rel\`&quot;">​</a></h3><p>Overrides the default link relation used in hypermedia responses:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResourceModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    make: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        link_rel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vehicle&quot;</span></span></code></pre></div><hr><h2 id="🔍-supported-field-features" tabindex="-1">🔍 Supported Field Features <a class="header-anchor" href="#🔍-supported-field-features" aria-label="Permalink to &quot;🔍 Supported Field Features&quot;">​</a></h2><h3 id="✅-standard-types" tabindex="-1">✅ Standard Types <a class="header-anchor" href="#✅-standard-types" aria-label="Permalink to &quot;✅ Standard Types&quot;">​</a></h3><p>Fields of these types are supported and automatically mapped:</p><ul><li><code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code></li><li><code>datetime</code>, <code>date</code>, <code>time</code></li><li><code>list[...]</code>, <code>dict</code>, <code>Literal[...]</code></li></ul><h3 id="✅-validation-rules" tabindex="-1">✅ Validation Rules <a class="header-anchor" href="#✅-validation-rules" aria-label="Permalink to &quot;✅ Validation Rules&quot;">​</a></h3><p>Pydantic field constraints are translated into Cerberus rules, including:</p><ul><li><code>min_length</code>, <code>max_length</code> → <code>minlength</code>, <code>maxlength</code></li><li><code>ge</code>, <code>le</code> → <code>min</code>, <code>max</code></li><li><code>const</code>, <code>enum</code> → <code>allowed</code></li><li><code>multiple_of</code>, <code>pattern</code> → <code>multipleof</code>, <code>regex</code></li></ul><p>Example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pydantic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Field</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Literal</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> License</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResourceModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Literal[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;trial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;full&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;trial&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Field(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">min_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="🔗-linking-resources" tabindex="-1">🔗 Linking Resources <a class="header-anchor" href="#🔗-linking-resources" aria-label="Permalink to &quot;🔗 Linking Resources&quot;">​</a></h2><p>Hypermea supports subresources (like Eve’s “sub-documents”) via a centralized registry:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hypermea.link </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Link</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LINKS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Link(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;car&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Link(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;organization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;owns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>You don’t declare these links inside your models. Instead, they live in a shared file like <code>domain/links.py</code>, keeping links as first-class entities.</p><p>Each <code>Link</code> object can define:</p><ul><li><code>parent</code>, <code>child</code>: the resource pair</li><li><code>rel</code>: the name of the link in the child’s <code>_links</code> object (defaults to the parent name)</li><li><code>collection_name</code>: optional override of the subresource name (default: <code>parent_child</code>)</li></ul><p>Hypermea handles:</p><ul><li>Creating the subresource schema and projection</li><li>Injecting it into <code>config[&#39;DOMAIN&#39;]</code></li><li>Linking and HAL compliance</li></ul><hr><h2 id="✅-what-hypermea-does-for-you" tabindex="-1">✅ What Hypermea Does for You <a class="header-anchor" href="#✅-what-hypermea-does-for-you" aria-label="Permalink to &quot;✅ What Hypermea Does for You&quot;">​</a></h2><ul><li>Converts <code>ResourceModel</code> classes into Eve resources</li><li>Enforces and enriches validation rules automatically</li><li>Manages singular/plural naming with developer intent</li><li>Supports embedded/nested models and lists</li><li>Keeps link logic out of your models and into a structured registry</li></ul><hr><h2 id="🧪-next-steps" tabindex="-1">🧪 Next Steps <a class="header-anchor" href="#🧪-next-steps" aria-label="Permalink to &quot;🧪 Next Steps&quot;">​</a></h2><ul><li>Try defining two resources and linking them with <code>hy link create parent child</code></li><li>Override <code>plural</code> and <code>link_rel</code> to control URL and hypermedia affordances</li><li>Nest models using <code>BaseModel</code> classes inside fields for structured objects</li></ul><hr><h2 id="🧠-coming-soon" tabindex="-1">🧠 Coming Soon <a class="header-anchor" href="#🧠-coming-soon" aria-label="Permalink to &quot;🧠 Coming Soon&quot;">​</a></h2><p>Planned enhancements include:</p><ul><li>Support for <code>Annotated[...]</code> fields</li><li>Class-level control over permissions and behavior (<code>Config.resource_methods</code>, etc.)</li><li>Many-to-many links and link-as-resource patterns</li></ul><p>Stay tuned, and keep your models clean. Hypermea will do the rest.</p>`,46)]))}const u=i(t,[["render",l]]);export{c as __pageData,u as default};
