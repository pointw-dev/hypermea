import{_ as d,C as o,c as h,o as r,j as a,al as t,a as e,G as n,t as p}from"./chunks/framework.CEo5TfsR.js";const f=JSON.parse('{"title":"api","description":"","frontmatter":{},"headers":[],"relativePath":"features/scaffolding-tools/api.md","filePath":"features/scaffolding-tools/api.md"}'),k={name:"features/scaffolding-tools/api.md"},c={class:"warning custom-block"},u={class:"warning custom-block"};function g(l,s,y,F,m,b){const i=o("centered-image");return r(),h("div",null,[s[12]||(s[12]=a("h1",{id:"api",tabindex:"-1"},[a("span",{class:"command"},"api"),e(),a("a",{class:"header-anchor",href:"#api","aria-label":'Permalink to "<span class="command">api</span>"'},"​")],-1)),a("div",c,[s[0]||(s[0]=a("p",{class:"custom-block-title"},"Work in progress",-1)),n(i,{src:"/img/work-in-progress.png"}),s[1]||(s[1]=a("p",null,"This warning will be removed once this page has passed testing.",-1))]),s[13]||(s[13]=t(`<p>There are three commands that run against <code>api</code></p><table tabindex="0"><thead><tr><th>Sub command</th><th>Description</th></tr></thead><tbody><tr><td><a href="#create"><code>create</code></a></td><td><code>&lt;name&gt;</code>, or <code>.</code> to use the current folder&#39;s name</td></tr><tr><td><a href="#addin"><code>addin</code></a></td><td>Add an addin to an already created API</td></tr><tr><td><a href="#version"><code>version</code></a></td><td>View or set the version number of the API</td></tr></tbody></table><h2 id="create" tabindex="-1">create <a class="header-anchor" href="#create" aria-label="Permalink to &quot;create&quot;">​</a></h2><p>Creates the API service. This command is best run in an empty folder.</p><p>The first choice you must make is the name of the service. This is the only required parameter.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # the service name will be the name of the folder you are in</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> whizbang</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # the service name will be &quot;whizbang&quot;</span></span></code></pre></div><h3 id="add-ins" tabindex="-1">Add-ins <a class="header-anchor" href="#add-ins" aria-label="Permalink to &quot;Add-ins&quot;">​</a></h3><p>After the name, you can select from several add-ins which enhance your service. All are optional, and you can choose as many as you wish. You can add them at create time, or any time later.</p><p>To see the add-ins available. they are listed as Options when you type:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><p>The add-ins are:</p><table tabindex="0"><thead><tr><th>Add in</th><th>Description</th></tr></thead><tbody><tr><td><code>-g</code> <a href="#--add-git"><code>--add-git</code></a></td><td>Initialize a local git repository</td></tr><tr><td><code>-d</code> <a href="#--add-docker"><code>--add-docker</code></a></td><td>Add Dockerfile and supporting files</td></tr><tr><td><code>-a</code> <a href="#--add-auth"><code>--add-auth</code></a></td><td>add authorization class and supporting files</td></tr><tr><td><code>-v</code> <a href="#--add-validation"><code>--add-validation</code></a></td><td>add custom validation class that you can extend</td></tr><tr><td><code>-w</code> <a href="#--add-websocket"><code>--add-websocket</code></a></td><td>add web socket and supporting files</td></tr><tr><td><code>-s</code> <a href="#--add-serverless"><code>--add-serverless</code></a></td><td>EXPERIMENTAL: add serverless framework and supporting files</td></tr></tbody></table><blockquote><p>NOTE: You will find more details on each add-in in the next section.</p></blockquote><p>You can mix and match these add-ins</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foobar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foobar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dg</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # exactly the same as above</span></span></code></pre></div><p>If you want all add-ins, the easiest way is:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foobar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -davwsg</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>When you select --add-git, it will always be added last as it performs the initial commit for you. This way all the add-ins that are installed first will be part of the commit.</p></div><h2 id="addin" tabindex="-1">addin <a class="header-anchor" href="#addin" aria-label="Permalink to &quot;addin&quot;">​</a></h2><p>If you didn&#39;t select an add-in when you created the API, you can always select it later with the <code>addin</code> command.</p><p>In other words...</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foobar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-validation</span></span></code></pre></div><p>...is the same as...</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foobar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> addin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-validation</span></span></code></pre></div><p>...no matter how much time passes between those two statements.</p><p>All the add-ins were introduced in the section above. This section provides more details:</p><h3 id="add-git" tabindex="-1">--add-git <a class="header-anchor" href="#add-git" aria-label="Permalink to &quot;--add-git&quot;">​</a></h3><p>details</p><h3 id="add-docker" tabindex="-1">--add-docker <a class="header-anchor" href="#add-docker" aria-label="Permalink to &quot;--add-docker&quot;">​</a></h3><ul><li><p>Adds the following files: <code>Dockerfile\`\` \`\`docker-compose.yml</code> (note: by default this file does not use a volume for mongodb, so killing the container also kills your data) <code>.docker-ignore\`\` \`\`image-build\`\` \`\`image-build.bat</code></p><p>...</p></li></ul><h3 id="add-auth" tabindex="-1">--add-auth <a class="header-anchor" href="#add-auth" aria-label="Permalink to &quot;--add-auth&quot;">​</a></h3><ul><li>Adds a folder named <code>auth</code> with modules to add authorization to your API (docs to come) <ul><li>NOTE: the only supported IdP is <a href="https://auth0.com/" target="_blank" rel="noreferrer">Auth0</a> at the moment, but it will be fairly easy to manually tweak to use any OAuth2 JWT issuer. (I have used a forked <a href="https://github.com/babelouest/glewlwyd" target="_blank" rel="noreferrer">Glewlwyd</a> with very minimal changes)</li></ul></li></ul><h3 id="add-validation" tabindex="-1">--add-validation <a class="header-anchor" href="#add-validation" aria-label="Permalink to &quot;--add-validation&quot;">​</a></h3><ul><li><p>adds a folder named <code>validation</code> with a module that adds custom validator to <code>HypermeaService</code>. Use this to extend custom validations. It comes with two validations:</p><ul><li><p><code>unique_ignorecase</code> - works exactly like the built-in <code>unique</code> validator except case is ignored</p></li><li><p><code>unique_to_parent</code> - set this to a string of a resource&#39;s parent (singular!). Uniqueness will only be applied to sibling resources, i.e. the same name can be used if the resource has a different parent.</p><ul><li><p>e.g.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resource</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> region</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resource</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> region</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span></span></code></pre></div><p>Now in <code>domain.store</code>, change the name field definition from this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;unique&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>to this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;unique_to_parent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;region&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ul></li></ul><h3 id="add-websocket" tabindex="-1">--add-websocket <a class="header-anchor" href="#add-websocket" aria-label="Permalink to &quot;--add-websocket&quot;">​</a></h3>`,35)),a("ul",null,[s[9]||(s[9]=a("li",null,[e("Define other events/listeners, emitters/senders in "),a("code",null,"websocket/__init__.py"),e(" - feel free to remove the default stuff you see there")],-1)),a("li",null,[s[2]||(s[2]=e("There is a test client at ")),a("code",null,p(l.BASE_API_URL)+"/_ws",1),s[3]||(s[3]=e(" (which you can remove in ")),s[4]||(s[4]=a("code",null,"websocket/__init__.py",-1)),s[5]||(s[5]=e(" by removing the ")),s[6]||(s[6]=a("code",null,"/_ws/chat",-1)),s[7]||(s[7]=e(" route) ")),s[8]||(s[8]=a("ul",null,[a("li",null,"This is useful to see how to configure the Javascript socket.io client to connect to the web socket now running in the API"),a("li",null,"It is also useful to test messages - the chat app merely re-emits what it receives")],-1))])]),s[14]||(s[14]=a("h3",{id:"add-serverless",tabindex:"-1"},[e("--add-serverless "),a("a",{class:"header-anchor",href:"#add-serverless","aria-label":'Permalink to "--add-serverless"'},"​")],-1)),a("div",u,[s[10]||(s[10]=a("p",{class:"custom-block-title"},"Experimental",-1)),n(i,{src:"/img/experimental.svg",width:"64"}),s[11]||(s[11]=a("p",null,"This feature is experimental, under development, and kinda finicky - use with caution.",-1))]),s[15]||(s[15]=t('<ul><li><p>Adds the following files:</p><p><code>serverless.py</code> - instantiates, but doesn&#39;t run, the HypermeaService app object. This object is made available to the serverless framework and is referenced in the <code>.yml</code> files</p><p><code>serverless-aws.yml</code></p><p><code>serverless-azure.yml</code></p><p><code>serverless-google.yml</code></p><p><code>logging_no-files.yml</code> - copy this over the original <code>logging.yml</code> to eliminate logging to the file system (which is not available with serverless)</p></li><li><p>Also installs serverless globally with npm, does an npm init in the root api folder, and locally installs some serverless plugins (node modules).</p></li></ul><h2 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h2><p>View or set the version number of the API</p>',3))])}const C=d(k,[["render",g]]);export{f as __pageData,C as default};
