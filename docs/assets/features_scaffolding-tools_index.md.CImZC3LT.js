import{_ as t,c as a,o,al as i}from"./chunks/framework.CEo5TfsR.js";const u=JSON.parse('{"title":"Scaffolding tools","description":"","frontmatter":{"layout":"doc","prev":{"text":"Features","link":"/features/"},"next":{"text":"<span class=\\"code\\">api</span>","link":"/features/scaffolding-tools/api"},"head":[["link",{"rel":"canonical","href":"https://pointw-dev.github.io/hypermea/features/scaffolding-tools/"}]]},"headers":[],"relativePath":"features/scaffolding-tools/index.md","filePath":"features/scaffolding-tools/index.md"}'),s={name:"features/scaffolding-tools/index.md"};function n(d,e,r,c,l,h){return o(),a("div",null,e[0]||(e[0]=[i(`<h1 id="scaffolding-tools" tabindex="-1">Scaffolding tools <a class="header-anchor" href="#scaffolding-tools" aria-label="Permalink to &quot;Scaffolding tools&quot;">â€‹</a></h1><h2 id="top-level-commands" tabindex="-1">Top level commands <a class="header-anchor" href="#top-level-commands" aria-label="Permalink to &quot;Top level commands&quot;">â€‹</a></h2><p>Use the hypermea toolkit to create and craft your API. These are command line tools, similar to how you use <code>git</code> or <code>docker</code>.</p><p>All commands begin with <code>hypermea</code> and are followed by one of the following top-level commands:</p><table tabindex="0"><thead><tr><th>command</th><th>Definition</th></tr></thead><tbody><tr><td><a href="./api.html"><code>api</code></a></td><td>This, unsurprisingly, represents the API service itself. When you run <code>hypermea api create...</code> a ton of code is generated, comprising your service. The code wraps start/stop (and other details) in a class called <code>HypermeaService</code> and your app is an instance of this class. <code>HypermeaService</code> inherits from <code>Flask</code> so your application is a Flask application as much as it is an hypermea/Eve application.</td></tr><tr><td><a href="./resource.html"><code>resource</code></a></td><td>These are the &#39;nouns&#39; of your service. The set of resources you add to your API comprise the service <strong>domain</strong>. Use the HTTP verbs (GET, POST, DELETE, PATCH, etc.) to operate these resources, and add affordances to enhance state management beyond CRUD.</td></tr><tr><td><a href="./link.html"><code>link</code></a></td><td>This creates a parent/child relationship between two resources and adds navigation affordances.</td></tr><tr><td><a href="./affordance.html"><code>affordance</code></a></td><td>In a Hypermedia API, clients operate your service&#39;s state by way of hyperlinks. When you want to offer your clients the opportunity to do so, you provide a link which when requested with an HTTP verb causes the state change. See the Hypermedia section below for more details and examples.</td></tr><tr><td><a href="./endpoint.html"><code>endpoint</code></a></td><td>In the very unlikely event that you need to provide a capability that does not fit within the constraints of Hypermedia, you can define an arbitrary endpoint. Use that cautiously, lest the ghost of Roy Fielding haunt you ðŸ˜ƒ</td></tr><tr><td><a href="./docker.html"><code>docker</code></a></td><td>When your API is equipped with <code>--add-docker</code> the <code>docker</code> command speeds up some of the mundate tasks you would do while developing and testing the API in a docker container.</td></tr><tr><td><a href="./integration.html"><code>integration</code></a></td><td>When your service needs to use other services (whether remote or installed locally) you may find it convenient to separate the integration logic into its own module. That what <code>integration</code> is for. There are some built-in integrations (e.g. to AWS&#39;s S3), or you can start with a blank integration and roll your own.</td></tr><tr><td><a href="./setting.html"><code>setting</code></a></td><td>(coming soon)</td></tr><tr><td><a href="./run.html"><code>run</code></a></td><td>This command launches your service. Call it anywhere in your service folder structure.</td></tr></tbody></table><p>Commands may have their own have unique sub-commands. Many share the following:</p><ul><li><code>create</code> - create the thing you&#39;re talking about, <ul><li>e.g. <code>hy api create...</code> or <code>hy resource create...</code></li></ul></li><li><code>list</code> - show the things you previously created</li><li><code>remove</code> - removes the thing you previously created.</li></ul><h2 id="help-when-you-need-it" tabindex="-1">Help when you need it <a class="header-anchor" href="#help-when-you-need-it" aria-label="Permalink to &quot;Help when you need it&quot;">â€‹</a></h2><p>You can view the above list by running <code>hypermea</code> with <code>--help</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hypermea</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><p>With each command, add <code>--help</code> to see more details about that command</p><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>The <code>hypermea</code> command is aliased to the shorter <code>hy</code> and you can use either interchangeably</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hypermea</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div>`,13)]))}const m=t(s,[["render",n]]);export{u as __pageData,m as default};
