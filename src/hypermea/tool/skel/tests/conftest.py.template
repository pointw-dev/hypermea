import sys
from pathlib import Path

# Add src/service to sys.path to allow `from configuration import ...` to work
service_dir = Path(__file__).resolve().parents[1] / "service"
sys.path.insert(0, str(service_dir))

import os
from typing import Any
import logging
import pytest
from pymongo import MongoClient
from hypermea.core.utils import is_mongo_running
from tests import load_settings_from_file
from hypermea_service import HypermeaService


LOG = logging.getLogger('pytest')
logger = logging.getLogger()
handler = [x for x in logger.handlers if x.name == 'console'][0]
handler.setLevel(getattr(logging, 'WARNING'))


@pytest.hookimpl(tryfirst=True)
def pytest_sessionstart(session):
    if not is_mongo_running():
        pytest.exit("❌ Could not connect to MongoDB instance.  Aborting.")


@pytest.fixture(scope='function')
def hypermea_settings() -> dict[str, str]:
    return {
        'HY_API_PORT': '2113',
        'HY_MONGO_DBNAME': 'pytest',
        'HY_TRACE_LOGGING': 'Disabled',
        'HY_CACHE_CONTROL': 'no-cache, no-store, must-revalidate',
        'HY_CACHE_EXPIRES': '30',
    }


@pytest.fixture(scope='module')
def settings_py() -> dict[str, Any]:
    return {}


@pytest.fixture(scope='function')
def api(hypermea_settings, settings_py):
    # allow step definitions to change hypermea settings
    for key, value in hypermea_settings.items():
        os.environ[key.upper()] = value

    # allow step definitions to change eve settings
    settings_filename = os.path.join(os.path.dirname(__file__), '../service/settings.py')
    test_settings = load_settings_from_file(settings_filename)
    for key, value in settings_py.items():
        test_settings[key.upper()] = value

    service = HypermeaService(host='0.0.0.0', debug='Enabled', settings=test_settings)
    service.dump_settings()
    app = service._app

    def setup_database():
        pass

    def cleanup_database():
        connection = MongoClient(
            app.config.get('MONGO_HOST'), app.config.get('MONGO_PORT')
        )
        connection.drop_database(app.config.get('MONGO_DBNAME'))
        connection.close()

    cleanup_database()
    setup_database()

    yield app.test_client()

    cleanup_database()
