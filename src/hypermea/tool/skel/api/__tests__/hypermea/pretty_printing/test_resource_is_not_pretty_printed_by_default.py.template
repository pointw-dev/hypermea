import pytest
from pytest_bdd import scenario, given, when, then

from __tests__.hypermea import *
from __tests__.hypermea.pretty_printing import *


@pytest.fixture(scope='module')
def context():
    return {}


@annotated_scenario(FEATURE_PATH, 'Client requests a resource without pretty-printing')
def test_resource_is_not_pretty_printed_by_default():
    pass


# Given a resource is configured
# And that resource has an item in its collection

@when('a client requests that resource without pretty printing')
def step_impl(api, context):
    response = api.get(f'/widgets/{context["widget_id"]}')
    assert_that(response.status_code).is_equal_to(200)
    context['widget'] = response.data.decode('utf-8')


@then('the response is not pretty-printed')
def step_impl(context):
    assert_that(context.get('widget').count('\n')).is_equal_to(0)
