import pytest
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse
from pytest_bdd import given, when, then, parsers
from __tests__.hypermea import *
from __tests__.hypermea.pagination import *


@pytest.fixture(scope='module')
def context():
    return {}


@annotated_scenario(FEATURE_PATH, 'Service can be configured with a different page query string parameter')
def test_service_can_be_configured_with_different_page_parameter():
    pass


@given("the service is configured with a different page query string parameter")
def step_impl(settings_py):
    settings_py['QUERY_PAGE'] = 'pg'

# And a resource is configured
# And that resource has 100 items in its collection

@when("a client requests this collection using the new page parameter")
def step_impl(api, context):
    response = api.get(
        f'/people?max_results&pg=2',
    )
    assert_that(response.status_code).is_equal_to(200)
    context['people'] = response.json


@then("the collection in the response contains the correct page")
def step_impl(context):
    meta = context['people']['_meta']
    assert_that(meta['pg']).is_equal_to(2)
