import pytest
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse
from __tests__.hypermea import *
from __tests__.hypermea.pagination import *
from pytest_bdd import given, when, then, parsers


@pytest.fixture(scope='module')
def context():
    return {}


@annotated_scenario(FEATURE_PATH, 'Client can limit the number of item in a collection')
def test_client_can_limit_items_returned_in_a_collection():
    pass

# Given a resource is configured

@given('that resource has 100 items in its collection')
def step_impl(api):
    people = []
    for index in range(100):
        people.append({'name': f'name{index+1}'})
    response = api.post(
        '/people',
        data=json.dumps(people),
        headers={'content-type': 'application/json'}
    )
    assert_that(response.status_code).is_equal_to(201)


@when(parsers.parse('a client requests this collection with a limit of {limit:d}'))
def step_impl(api, context, limit):
    response = api.get(
        f'/people?max_results={limit}',
    )
    assert_that(response.status_code).is_equal_to(200)
    context['people'] = response.json


@then(parsers.parse('the collection in the response has {limit:d} items'))
def step_impl(context, limit):
    item_count = len(context['people']['_items'])
    if limit > item_count:
        limit = item_count
    assert_that(item_count).is_equal_to(limit)

@then(parsers.parse('the next link relation is {next_link}'))
def step_impl(context, next_link):
    actual_next_link = 'present' if 'next' in context['people']['_links'] else 'absent'
    assert_that(next_link).is_equal_to(actual_next_link)

@then(parsers.parse('the value of the last page is {last_page}'))
def step_impl(context, last_page):
    last_link = 'absent' if 'last' not in context['people']['_links'] else context['people']['_links']['last']['href']
    if last_link == 'absent':
        actual_last_page = 'absent'
    else:
        parsed = urlparse(last_link)
        query_params = parse_qsl(parsed.query, keep_blank_values=True)
        actual_last_page = next((value for key, value in query_params if key == 'page'), 'absent')
    assert_that(last_page).is_equal_to(actual_last_page)
