import pytest
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse
from pytest_bdd import given, when, then, parsers
from __tests__.hypermea import *
from __tests__.hypermea.embedding import *


@pytest.fixture(scope='module')
def context():
    return {}


@annotated_scenario(FEATURE_PATH, 'Embedding in a collection')
def test_embedding_in_a_collection():
    pass


@when('a client requests the parent collection asking for embedded children')
def step_impl(api, context):
    result = api.get('/people?embed=cars')
    assert_that(result.status_code).is_equal_to(200)
    context['collection'] = result.json
    context['rel'] = 'people'


@then("each item in the embedded parent collection must contain that parent's children")
def step_impl(context):
    for person in context['collection']['_embedded']['people']:
        assert_that(person['_embedded']).contains_key('cars')
        assert_that(person['_embedded']['cars']).is_type_of(list)
