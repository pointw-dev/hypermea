import pytest
from pytest_bdd import scenario, given, when, then
from __tests__.hypermea import *
from __tests__.hypermea.sorting import *


@pytest.fixture(scope='module')
def context():
    return {}


@annotated_scenario(FEATURE_PATH, 'Service can be configured with a different sort query string parameter')
def test_sort_parameter_name_can_be_changed():
    pass


@given('the service is configured with a different sort query string parameter')
def step_impl(settings_py):
    settings_py['QUERY_SORT'] = 'order_by'

# And a resource is configured
# And that resource has multiple items in its collection

@when('a client requests this collection using the new sort parameter')
def step_impl(api, context):
    response = api.get(
        '/people?order_by=name'
    )
    assert_that(response.status_code).is_equal_to(200)
    context['people'] = response.json['_items']

# Then the collection in the response is sorted accordingly
